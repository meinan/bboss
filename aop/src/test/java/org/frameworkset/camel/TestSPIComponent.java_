/*
 *  Copyright 2008 biaoping.yin
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.frameworkset.camel;

import org.apache.camel.Endpoint;
import org.apache.camel.Exchange;
import org.apache.camel.Producer;
import org.apache.camel.builder.RouteBuilder;


/**
 * <p>Title: TestSPIComponent.java</p> 
 * <p>Description: </p>
 * <p>bboss workgroup</p>
 * <p>Copyright (c) 2007</p>
 * @Date 2009-11-1 上午11:47:55
 * @author biaoping.yin
 * @version 1.0
 */
public class TestSPIComponent extends ContextTestSupport
{
//	 protected CamelContext context;
	public void testBase() throws Exception
	{
		final String uri = "bboss:(mina::all)/serviceid";
		context.addRoutes(new RouteBuilder() {

            public void configure() throws Exception {
                from(uri).to("mock:result");
            }
        });
//		Test tt = t.getEndpoint(Test.class);
//		System.out.println(tt);
		Endpoint endpoint = context.getEndpoint(uri);
        Exchange exchange = endpoint.createExchange();
        Producer producer = endpoint.createProducer();
        exchange.getIn().setBody("Hello World");
        producer.process(exchange);
	}
	
	public static void main(String[] args) throws Exception
	{
		TestSPIComponent t = new TestSPIComponent();
		t.testBase();
	}
	
//	/**
//     * Resolves the given name to an {@link Endpoint} of the specified type.
//     * If the name has a singleton endpoint registered, then the singleton is returned.
//     * Otherwise, a new {@link Endpoint} is created and if the endpoint is a
//     * singleton it is registered as a singleton endpoint.
//     *
//     * @param name  the name of the endpoint
//     * @param endpointType  the expected type
//     * @return the endpoint
//     */
//    <T extends Object> T getEndpoint(Class<T> endpointType)
//    {
//    	try
//		{
//			return endpointType.newInstance();
//		}
//		catch (InstantiationException e)
//		{
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		catch (IllegalAccessException e)
//		{
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		return null;
//    }
//    
//    static class Test
//    {
//    	
//    }
}
